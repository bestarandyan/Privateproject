<?xml version="1.0" encoding="UTF-8"?>
<project name="ClaimAssistant" default="help"><!-- 应用程序名称， 也就是apk的名称 -->

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />
	<property name="appName" value="auto_appName"/><!-- apk的名称   这个貌似没什么作用-->
    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />
	<property file="project.properties" />
    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}"><!-- android SDK的安装目录 -->
        <isset property="env.ANDROID_HOME" />
    </condition>
    <!-- sdk info -->
    <property name="sdk.dir" value="/var/local/android_sdk/sdk"></property><!-- android SDK的安装目录 -->
	<!-- project info -->
	<property name="project.parent.dir" value="/home/QingFeng/workspace"></property><!-- 项目存在的目录 -->
	<property name="project.dir" value="${project.parent.dir}/ClaimAssistant" /><!-- 项目的根目录 -->
 	<property name="external-jars" value="libs" /><!-- 外部包的目录，  这里指项目根目录下面的lib文件 -->
 	
 	<!-- 是否修改包名 -->
 	<property name="if_amend_package" value="true"></property><!-- 是否修改包名    开发者只要修改这里  true为本apk会修改包名 新的包名在new_package_name中定义 -->
 	<property name="old_package_name" value="com.chinaLife.claimAssistant.activity" /><!-- 项目的原始主包名 -->
 	<property name="new_package_name" value="com.chinaLife.claimAssistant.activityversionone" /><!-- 项目的新的主包名  只有在 ${if_amend_package} 的值为true时才会修改主包名-->
 	<!-- key  info -->
 	<property name="key.store" location="${project.dir}/bestar.keystore" /><!-- 签名文件KEY的放置目录 -->
 	<property name="key.store.password" value="123456" /><!-- 签名文件的密码 -->
 	<property name="key.alias" value="bestar.keystore" /><!-- 签名文件的别名 -->
 	<property name="key.alias.password" value="123456" /><!-- 别名的密码 -->
 	<property name="proguard-home" value="${sdk.dir}/tools/proguard/lib"/>
 	<!-- compilation options -->
    <property name="java.encoding" value="UTF-8" />
    <property name="java.target" value="1.5" />
    <property name="java.source" value="1.5" />
    <property name="java.compilerargs" value="" /> 
    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${project.dir}/build_external.xml" />
	<!-- <import file="D:/project_2013/boluomi/ShareSDK/build.xml"></import>
	<import file="D:/project_2013/boluomi/ImageHandle_lib/build.xml"></import> -->
</project>
